#!/usr/bin/env bash
set -e

case `uname` in
 "Darwin") {
     if !(which greadlink > /dev/null); then
        echo 'ERROR: greadlink not found: GNU utils required for Mac. You may use homebrew to install them: brew install coreutils gnu-sed'
        exit 1
     fi
     CCSH_PATH=$(greadlink -f "$0")
    } ;;
 *)  CCSH_PATH=$(readlink -f "$0") ;;
esac

CC_INSTALL_DIR=$(dirname "${CCSH_PATH}")

CC_VERSION="@cc_version@"

CC_CMD=(
    "install"
    "check"
    "csvimport"
    "sonarimport"
    "sourcemonitorimport"
    "scmlogparser"
    "merge"
    "summary")
CC_CMD_DESCRIPTION=(
    "installs submodules"
    "checks if json is valid"
    "imports data from csv files (e.g. sourcemonitor)"
    "imports data from sonar"
    "imports data from sourcemonitor"
    "imports data from scmlog"
    "merges multiple json files"
    "adds project summary to json file")
CC_CMD_BIN=(
    "install"
    "${CC_INSTALL_DIR}/codecharta-check-${CC_VERSION}/bin/codecharta-check"
    "${CC_INSTALL_DIR}/codecharta-csvimport-${CC_VERSION}/bin/codecharta-csvimport"
    "${CC_INSTALL_DIR}/codecharta-sonarimport-${CC_VERSION}/bin/codecharta-sonarimport"
    "${CC_INSTALL_DIR}/codecharta-sourcemonitorimport-${CC_VERSION}/bin/codecharta-sourcemonitorimport"
    "${CC_INSTALL_DIR}/codecharta-scmlogparser-${CC_VERSION}/bin/codecharta-scmlogparser"
    "${CC_INSTALL_DIR}/codecharta-merge-${CC_VERSION}/bin/codecharta-merge"
    "${CC_INSTALL_DIR}/codecharta-summary-${CC_VERSION}/bin/codecharta-summary")

exit_with_error() {
  echo Error: $1 1>&2
  exit 1
}

get_key_for_cc_cmd() {
  for i in `seq 0 ${#CC_CMD[@]}`
  do
    if [[ "${CC_CMD[i]}" == "$1" ]]; then
      key=${i}
      return
    fi
  done
  exit_with_error "command $1 not found"
}

usage() {
  echo "CodeCharta CLI version ${CC_VERSION}"
  echo "Usage: ccsh <cmd> [...]"
  echo
  echo "  <cmd> name of the command"
  echo
  echo "  -h     Display this help message"
  echo "  -l     List all available commands"
}

install() {
  find "${CC_INSTALL_DIR}" -iname "*.tar" \
    -exec tar xf {} -C "${CC_INSTALL_DIR}" --keep-newer-file \; \
    -exec rm {} \;
}

run_cmd() {
  cc_cmd=$1
  set -- "${@:2}"
  get_key_for_cc_cmd ${cc_cmd}
  "${CC_CMD_BIN[$key]}" "$@"
}

print_help() {
  usage
}

list() {
  echo "Commands for ccsh"
  echo "Usage: ccsh <cmd> [...]"
  echo
  for i in "${CC_CMD[@]}"
  do
      get_key_for_cc_cmd $i
      echo -e "${CC_CMD[key]} \t | ${CC_CMD_DESCRIPTION[key]}"
  done
}

while getopts ":f: :h :l" opt; do
  case ${opt} in
    h)
      print_help
      exit 0
      ;;
    l)
      list
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND-1))"

if [ ! $1 ]; then
  usage
  exit 1
fi

set -o pipefail
run_cmd "$@"
